syntax = "proto3";

package searchify;

service Internal {
  rpc Hello(HelloRequest) returns (HelloResponse) {}
  rpc RaftMessage(SearchifyRaftMessage) returns (EmptyResponse) {}
  rpc Heartbeat(HeartbeatRequest) returns (EmptyResponse) {}

  rpc Set(KeyValue) returns (EmptyResponse) {}
  rpc Get(Key) returns (KeyValue) {}

  rpc Health(HealthRequest) returns (HealthResponse) {}
  rpc CreateIndex(CreateIndexRequest) returns (CreateIndexResponse) {}
  rpc DeleteIndex(DeleteIndexRequest) returns (EmptyResponse) {}
  rpc GetIndex(GetIndexRequest) returns (IndexState) {}
  rpc ListIndices(ListIndicesRequest) returns (ListIndicesResponse) {}
  rpc ListNodes(ListNodesRequest) returns (ListNodesResponse) {}
  rpc ListShards(ListShardsRequest) returns (ListShardsResponse) {}

  rpc IndexDocument(IndexDocumentRequest) returns (IndexDocumentResponse) {}
}

message HelloRequest {
  uint64 peer_id = 1;
  bool is_master = 2;
}

message HelloResponse {
  uint64 peer_id = 1;
}

message SearchifyRaftMessage {
  bytes wrapped_message = 1;
  uint64 raft_group_id = 2;
}

message EmptyResponse {
}

message RaftLocalState {
  uint64 term = 1;
  uint64 vote = 2;
  uint64 commit = 3;
  uint64 last_index = 4;
}

message ApplyState {
  uint64 applied_index = 1;
  uint64 truncated_index = 2;
  uint64 truncated_term = 3;
}

enum RaftGroupType {
  RAFT_GROUP_META = 0;
  RAFT_GROUP_SEARCH = 1;
}

message RaftGroupMetaState {
  uint64 id = 1;
  repeated Peer peers = 2;
  RaftGroupType group_type = 3;
}

message Peer {
  uint64 id = 1;
}

message Key {
  bytes key = 1;
}

message KeyValue {
  bytes key = 1;
  bytes value = 2;
}

message KeyValueEntry {
  oneof entry {
    KeyValue set = 1;
    CreateIndexRequest create_index = 2;
    LivenessHeartbeat heartbeat = 3;
    DeleteIndexRequest delete_index = 4;
  }
}

message SearchEntry {
  oneof operation {
    AddDocumentOperation add_document = 1;
  }
}

message AddDocumentOperation {
}

message EntryContext {
  uint64 id = 1;
}

message CreateIndexRequest {
  string name = 1;
  IndexSchema schema = 2;
  uint64 shard_count = 3;
  uint64 replica_count = 4;
}

message IndexSchema {
}

message CreateIndexResponse {
  bool success = 1;
}

message DeleteIndexRequest {
  string name = 1;
}

message GetIndexRequest {
  string name = 1;
}

message ListIndicesRequest {
} 

message ListIndicesResponse {
  repeated IndexState indices = 1;
}

enum IndexStatus {
  INDEX_UNALLOCATED = 0;
  INDEX_INITIALIZING = 1;
  INDEX_READY = 2;
}

message IndexState {
  uint64 id = 1;
  IndexStatus status = 2;
  uint64 shard_count = 3;
  uint64 replica_count = 4;
  string name = 5;
  repeated ShardState shards = 6;
}

enum ShardStatus {
  SHARD_INITIALIZING = 0;
  SHARD_READY = 1;
}

message ShardState {
  uint64 id = 1;
  uint64 index_id = 2;
  ShardStatus status = 3;
  repeated Peer replicas = 4;
  IdRange range = 5;
}

message IdRange {
  uint64 low = 1;
  uint64 high = 2;
}

message LivenessHeartbeat {
  Peer peer = 1;
  uint64 tick = 2;
}

message PeerState {
  Peer peer = 1;
  uint64 last_heartbeat_tick = 2;
}

message NodeState {
  PeerState peer_state = 1;
}

message ListNodesRequest {
}

message ListNodesResponse {
  repeated NodeState nodes = 1;
}

message HeartbeatRequest {
  Peer peer = 1;
}

message HealthRequest {
}

message HealthResponse {
  bool available = 1;
  bool fully_replicated = 2;
}

message ListShardsRequest {
  Peer peer = 1;
}

message ListShardsResponse {
  repeated ShardState shards = 1;
}

message SequenceState {
  uint64 value = 1;
}

message IndexDocumentRequest {
  uint64 shard_id = 1;
}

message IndexDocumentResponse {
}